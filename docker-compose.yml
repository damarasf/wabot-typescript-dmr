version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wabot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-wabot_db}
      POSTGRES_USER: ${DB_USER:-wabot_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-wabot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - wabot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-wabot_user} -d ${DB_NAME:-wabot_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # WhatsApp Bot Application
  wabot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wabot-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-wabot_db}
      DB_USER: ${DB_USER:-wabot_user}
      DB_PASSWORD: ${DB_PASSWORD:-wabot_password}
      
      # Bot Configuration
      BOT_NAME: ${BOT_NAME:-DMR Bot}
      OWNER_NUMBER: ${OWNER_NUMBER}
      
      # N8N Integration
      N8N_WEBHOOK_URL: ${N8N_WEBHOOK_URL}
      N8N_API_KEY: ${N8N_API_KEY}
      
      # Limits and Features
      DAILY_LIMIT_FREE: ${DAILY_LIMIT_FREE:-10}
      DAILY_LIMIT_PREMIUM: ${DAILY_LIMIT_PREMIUM:-100}
      
      # Environment
      NODE_ENV: production
      TZ: ${TIMEZONE:-Asia/Jakarta}
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - wabot_logs:/app/logs
      - wabot_session:/app/_IGNORE_dmr-bot
    networks:
      - wabot-network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for session management (optional)
  redis:
    image: redis:7-alpine
    container_name: wabot-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - wabot-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  wabot_logs:
    driver: local
  wabot_session:
    driver: local
  redis_data:
    driver: local

networks:
  wabot-network:
    driver: bridge
