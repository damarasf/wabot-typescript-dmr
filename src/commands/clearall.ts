import { Client, Message } from '@open-wa/wa-automate';
import { Command } from '../middlewares/commandParser';
import { User } from '../database/models';
import config from '../utils/config';

/**
 * Clear All Command
 * Clears WhatsApp chat history and media to free up memory - Owner only
 * Features comprehensive chat clearing with safety confirmations
 */
export const clearallCommand: Command = {
  name: 'clearall',
  aliases: ['clearchat', 'cleanchat', 'clearchats'],
  description: 'Hapus semua riwayat chat WhatsApp (khusus owner)',
  category: 'Owner',
  cooldown: 30,
  usage: '!clearall CONFIRM',
  example: '!clearall CONFIRM',
  adminOnly: false,
  ownerOnly: true,
    /**
   * Execute the clearall command
   * @param message - WhatsApp message object
   * @param args - Command arguments [CONFIRM]
   * @param client - WhatsApp client instance
   * @param user - Owner user database object
   */
  async execute(message: Message, args: string[], client: Client, user?: User): Promise<void> {
    try {
      console.log(`üßπ Processing clearall command from owner ${message.sender.id}`);
      
      // Additional owner verification (safety check)
      if (String(message.sender.id) !== config.ownerNumber) {
        console.log(`‚ùå Unauthorized clearall attempt by ${message.sender.id}`);
        await client.reply(
          message.chatId,
          'üö´ *Akses Ditolak*\n\n' +
          'Perintah ini hanya dapat digunakan oleh owner bot.\n\n' +
          '_Ini adalah operasi untuk membersihkan riwayat chat._',
          message.id
        );
        return;
      }

      // Check for confirmation
      if (args.length === 0 || args[0] !== 'CONFIRM') {
        console.log('‚ö†Ô∏è Clearall requested without confirmation');
        
        const warningMessage = `üö® *PERINGATAN*\n\n` +
          `‚ö†Ô∏è **OPERASI PEMBERSIHAN CHAT**\n` +
          `Perintah ini akan menghapus semua riwayat chat WhatsApp!\n\n` +
          `üóëÔ∏è *Yang Akan Dihapus:*\n` +
          `‚Ä¢ Semua riwayat chat\n` +
          `‚Ä¢ Semua media (foto, video, dokumen)\n` +
          `‚Ä¢ Pesan yang tersimpan di memori\n\n` +
          `‚úÖ *Yang TIDAK Dihapus:*\n` +
          `‚Ä¢ Data pengguna di database\n` +
          `‚Ä¢ Konfigurasi bot\n` +
          `‚Ä¢ Session WhatsApp\n\n` +
          `‚ö° *Untuk melanjutkan, ketik:*\n` +
          `\`!clearall CONFIRM\`\n\n` +
          `_Tujuan: Mengosongkan memory dan mempercepat bot._`;

        await client.reply(
          message.chatId,
          warningMessage,
          message.id
        );
        return;
      }

      console.log('üî• Clearall confirmed, starting chat clearing process');

      // Send initial warning with countdown
      const initialWarning = `üö® *PROSES PEMBERSIHAN DIMULAI*\n\n` +
        `‚ö†Ô∏è Menghapus riwayat chat dalam 3 detik...\n` +
        `üîÑ Proses ini akan membersihkan memory bot.\n\n` +
        `_Tunggu hingga selesai..._`;
      
      await client.reply(
        message.chatId,
        initialWarning,
        message.id
      );

      // 3 second delay for preparation
      await new Promise(resolve => setTimeout(resolve, 3000));

      console.log('üßπ Starting chat clearing process');

      // Send progress message
      await client.reply(
        message.chatId,
        'üîÑ *Membersihkan riwayat chat...*\n\n_Harap tunggu, jangan matikan bot._',
        message.id
      );

      let clearedCount = 0;
      let methodUsed = 'Unknown';
      
      try {
        // Method 1: Try clearAllChats if available
        if (typeof client.clearAllChats === 'function') {
          console.log('üßπ Using clearAllChats method...');
          await client.clearAllChats();
          methodUsed = 'clearAllChats()';
          clearedCount = -1; // Indicates all chats
        } else {
          // Method 2: Fallback - Get all chats and clear individually  
          console.log('üßπ Using individual chat clearing method...');
          const allChats = await client.getAllChats();
          
          for (const chat of allChats) {
            try {
              if (typeof client.clearChat === 'function') {
                await client.clearChat(chat.id);
                clearedCount++;
              }
            } catch (chatError) {
              console.log(`‚ö†Ô∏è Could not clear chat ${chat.id}:`, chatError);
            }
          }
          methodUsed = 'clearChat() per chat';
        }

        // Success message
        const timestamp = new Date().toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' });
        
        let resultMessage = `‚úÖ *RIWAYAT CHAT BERHASIL DIBERSIHKAN*\n\n`;
        
        if (clearedCount === -1) {
          resultMessage += `üßπ *Status:* Semua chat dibersihkan\n`;
        } else {
          resultMessage += `üßπ *Chat Dibersihkan:* ${clearedCount} chat\n`;
        }
        
        resultMessage += `‚öôÔ∏è *Metode:* ${methodUsed}\n` +
          `‚è∞ *Waktu:* ${timestamp}\n` +
          `üëë *Oleh:* Owner\n\n` +
          `‚ú® *Hasil:* Memory bot telah dibersihkan!\n` +
          `üöÄ *Bot siap dengan performa optimal.*`;

        await client.reply(
          message.chatId,
          resultMessage,
          message.id
        );

        console.log(`‚úÖ Chat clearing completed successfully`);
        console.log(`üìä Method used: ${methodUsed}`);
        console.log(`üïê Operation completed at: ${timestamp}`);

      } catch (clearError) {
        console.error('‚ùå Error during chat clearing:', clearError);
        
        await client.reply(
          message.chatId,
          `‚ùå *OPERASI GAGAL*\n\n` +
          `Terjadi kesalahan saat membersihkan chat.\n\n` +
          `üîß *Saran:*\n` +
          `‚Ä¢ Restart bot dan coba lagi\n` +
          `‚Ä¢ Periksa koneksi WhatsApp\n` +
          `‚Ä¢ Hapus chat manual jika diperlukan\n\n` +
          `_Coba lagi nanti atau restart bot._`,
          message.id
        );
      }

    } catch (error) {
      console.error('‚ùå Critical error in clearall command:', error);
      
      try {
        await client.reply(
          message.chatId,
          `‚ùå *KESALAHAN SISTEM*\n\n` +
          `Terjadi kesalahan kritis.\n\n` +
          `üîß *Solusi:*\n` +
          `‚Ä¢ Restart bot\n` +
          `‚Ä¢ Periksa log error\n` +
          `‚Ä¢ Hubungi support jika masalah berlanjut`,
          message.id
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send clearall error message:', replyError);
      }
    }
  }
};

export default clearallCommand;